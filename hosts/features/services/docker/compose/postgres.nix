# Auto-generated using compose2nix v0.1.7.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."DB" = {
    image = "postgres:latest";
    environment = {
      PGUSER = "postgres";
      POSTGRES_PASSWORD = "postgres";
      POSTGRES_USER = "postgres";
    };
    volumes = [
      "postgresDB:/var/lib/postgresql/data:rw"
    ];
    ports = [
      "5432:5432/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--health-cmd='pg_isready'"
      "--health-interval=30s"
      "--health-retries=5"
      "--health-start-period=30s"
      "--health-timeout=1m0s"
      "--network-alias=db"
      "--network=postgres-regatta_def"
    ];
  };
  systemd.services."docker-DB" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "docker-network-postgres-regatta_def.service"
      "docker-volume-postgresDB.service"
    ];
    requires = [
      "docker-network-postgres-regatta_def.service"
      "docker-volume-postgresDB.service"
    ];
    partOf = [
      "docker-compose-postgres-root.target"
    ];
    wantedBy = [
      "docker-compose-postgres-root.target"
    ];
  };
  virtualisation.oci-containers.containers."pgadmin" = {
    image = "dpage/pgadmin4:latest";
    environment = {
      PGADMIN_DEFAULT_EMAIL = "admin@sits.ruhr";
      PGADMIN_DEFAULT_PASSWORD = "admin";
    };
    volumes = [
      "pgadmin:/var/lib/pgadmin:rw"
    ];
    ports = [
      "5431:53603/tcp"
      "5430:80/tcp"
    ];
    dependsOn = [
      "DB"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=pgadmin"
      "--network=postgres-regatta_def"
    ];
  };
  systemd.services."docker-pgadmin" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "docker-network-postgres-regatta_def.service"
      "docker-volume-pgadmin.service"
    ];
    requires = [
      "docker-network-postgres-regatta_def.service"
      "docker-volume-pgadmin.service"
    ];
    partOf = [
      "docker-compose-postgres-root.target"
    ];
    unitConfig.UpheldBy = [
      "docker-DB.service"
    ];
    wantedBy = [
      "docker-compose-postgres-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-postgres-regatta_def" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "${pkgs.docker}/bin/docker network rm -f postgres-regatta_def";
    };
    script = ''
      docker network inspect postgres-regatta_def || docker network create postgres-regatta_def
    '';
    partOf = [ "docker-compose-postgres-root.target" ];
    wantedBy = [ "docker-compose-postgres-root.target" ];
  };

  # Volumes
  systemd.services."docker-volume-pgadmin" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect pgadmin || docker volume create pgadmin
    '';
    partOf = [ "docker-compose-postgres-root.target" ];
    wantedBy = [ "docker-compose-postgres-root.target" ];
  };
  systemd.services."docker-volume-postgresDB" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect postgresDB || docker volume create postgresDB
    '';
    partOf = [ "docker-compose-postgres-root.target" ];
    wantedBy = [ "docker-compose-postgres-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-postgres-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
